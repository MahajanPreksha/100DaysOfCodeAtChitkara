#Lecture 10
Function: Logical set of code which performs a specific task
We can pass inputs in functions which are called Parameters and whatever we get the output from it, its datatype is called Return DataType.
Imporrtance: Increases reusability of code, DRY principle (Don't Repeat Yourself), easy to read
Types of Functions: (1) User Defined (2) Built-In
(1) User Defined Functions: return_type function_name(parameter1, parameter2,...){statements;}
Function Name: should depict function's functionality
Return Type: necessary to mention return
Parameters: mention their datatype, separated by commas, allows multiple functions with same name but different datatype
Function Body: Contains code of the task performed by function
Calling of a Function: Call inside main function, write name, followed by ();
Functions should be defined above main() function.
Function Prototype: For defining a function after function call (Example: int add(int, int);)
(2) Built-In/ Standard Library Functions: Already defined
Example: pow(a,b), sqrt(a,b)

#Lecture 11
Scope of Variable: A part of program from where a variable is accessible.
Local Variable: declared inside a function
Global Variable: exist throughout the entire program
Local Variable precedence is more than that of Global Variable.
Scope resolution operator: :: (helps to access global variable from a function which contains same name local variable as of global variable)
Formal Parameters: passed in function definition
Actual Parameters: passed during function call
Pass by Value: Parameter values are copied to another values
Pass by Reference: Parameter values are passed themselves (& operator is used: allows to use alias name of variable)
Default Parameter: We can give default values to a function during definition which can get executed if no other value is given to variable passed, by default.